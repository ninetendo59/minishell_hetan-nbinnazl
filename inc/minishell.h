/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   minishell.h                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hetan <hetan@student.42kl.edu.my>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/03/27 01:52:11 by hetan             #+#    #+#             */
/*   Updated: 2024/10/14 23:53:26 by hetan            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef MINISHELL_H
# define MINISHELL_H

/* ************************************************************************** */
/*     Include libraries.                                                     */
/* ************************************************************************** */

# include <unistd.h>
# include <limits.h>
# include <stdlib.h>
# include <string.h>
# include <stdio.h>
# include <fcntl.h>
# include <sys/wait.h>
# include <signal.h>
# include <sys/stat.h>
# include <sys/types.h>
# include <errno.h>
# include <termios.h>
# include <curses.h>
# include <readline/readline.h>
# include <readline/history.h>
# include "libft.h"
# if defined(__APPLE__) && defined (__MACH__)
#  include <sys/syslimits.h>
# elif defined(__linux__)
#  include <linux/limits.h>
#  define IS_LINUX 1
# endif


/* ************************************************************************** */
/*     Constant declaration.                                                  */
/* ************************************************************************** */

# ifndef BUFFER_SIZE
#  define BUFFER_SIZE 1024
# endif

/* ************************************************************************** */
/*     Unclassified declaration.                                              */
/* ************************************************************************** */

// # ifndef EHCO || CD || PWD || EXP || UNS || ENV
// #  define ECHO "echo"
// #  define CD "cd"
// #  define PWD "pwd"
// #  define EXP "export"
// #  define UNS "unset"
// #  define ENV "env"
// # endif

typedef struct s_command
{
	const char *name;
	void (*func)(void);
}               t_command;

typedef struct	s_env
{
	char			*value;
	struct s_env	*next;
}	t_env;

typedef struct s_meta
{
	char	*cmd;
	char	*dir;
	t_env	*env;
	ssize_t	len;
	int		ret;
	int		exit;
	int		pipe;
	int		left;
	int		d_left;
	int		right;
	int		d_right;
}   t_meta;

typedef struct s_cwd
{
	char *cwd;
	char *home;
	char *disp;
}	t_cwd;

typedef struct	s_sig
{
	int				sigint;
	int				sigquit;
	int				exit_stat;
	pid_t			pid;
}	t_sig;

void curr_dir(void);

void ctrl_c(int sig);

void check_sig(void);


/* ************************************************************************** */
/*     UTILS                                                                  */
/* ************************************************************************** */

/* ************************************************************************** */
/*     libft_extra                                                            */
/* ************************************************************************** */

void	*ft_memdel(void *ptr);

/* ************************************************************************** */
/*     free                                                                   */
/* ************************************************************************** */

void	ft_free_tab(char **tab);
void	ft_free_env(t_env *env);


/* ************************************************************************** */
/*     BUILTINS                                                               */
/* ************************************************************************** */

/* ************************************************************************** */
/*     echo                                                                   */
/* ************************************************************************** */

int		ft_b_echo(char **args);

/* ************************************************************************** */
/*     cd                                                                     */
/* ************************************************************************** */

int		ft_b_cd(char **args, t_env *env);

/* ************************************************************************** */
/*     pwd                                                                    */
/* ************************************************************************** */

int		ft_b_pwd(void);

/* ************************************************************************** */
/*     export                                                                 */
/* ************************************************************************** */

char	*ft_get_envname(char *dest, const char *src);

int		ft_envadd(const char *value, t_env *env);
int		ft_is_inenv(t_env *env, char *args);
int		ft_b_export(char **args, t_env *env, t_env *secret);

/* ************************************************************************** */
/*     unset                                                                  */
/* ************************************************************************** */

int		ft_b_unset(char **args, t_meta *minishell);

/* ************************************************************************** */
/*     env                                                                    */
/* ************************************************************************** */

int		ft_b_env(t_env *env);

/* ************************************************************************** */
/*     exit                                                                   */
/* ************************************************************************** */

void	ft_b_exit(t_meta *minishell);


/* ************************************************************************** */
/*     ENV                                                                    */
/* ************************************************************************** */

int		ft_init_env(t_meta *minishell, char **env_array);


/* ************************************************************************** */
/*     SIGNAL                                                                 */
/* ************************************************************************** */

void	ft_init_signal(void);


/* ************************************************************************** */
/*     EXTENDS                                                                */
/* ************************************************************************** */

extern	t_sig	g_sig;

#endif